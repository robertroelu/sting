{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/queryElement.ts", "../src/utils/queryElements.ts", "../src/utils/startupJobs/createFilterEl.ts", "../src/utils/startupJobs/createJob.ts", "../src/utils/startupJobs/fetchJobs.ts", "../src/utils/startupJobs/sortArrayByDateProp.ts", "../src/startupJobs.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "/**\n * @param {string} selector\n * @param parent\n * @returns\n */\nexport function queryElement<T extends HTMLElement>(\n  selector: string,\n  parent?: HTMLElement | Document\n): T | null {\n  return (parent || document).querySelector(selector) as T | null;\n}\n", "/**\n * @param selector\n * @param parent\n * @returns\n */\n\nexport function queryElements<T extends HTMLElement>(\n  selector: string,\n  parent?: Element | Document\n): T[] {\n  return Array.from((parent || document).querySelectorAll(selector)) as T[];\n}\n", "export function createFilterEl(\n  value: string,\n  templateElement: HTMLElement,\n  CMSFilterField: string\n) {\n  // Clone the template element\n  const element = templateElement.cloneNode(true) as HTMLElement;\n  const elLabel = element.lastChild as HTMLElement;\n  if (!elLabel) return;\n\n  elLabel.setAttribute('fs-cmsfilter-field', CMSFilterField);\n\n  // Query the inner elements\n  const label = element.querySelector('span');\n  const input = element.querySelector('input');\n\n  if (!label || !input) return;\n\n  // Populate the inner elements\n  label.textContent = value;\n  input.value = value;\n\n  return element;\n}\n", "/**\n *\n * @param job\n * @param templateElement\n * @returns\n */\n\nimport type { Job } from './types';\n\n// Create new items from template element\nexport function createJob(job: Job, templateElement: HTMLElement) {\n  const newEl = templateElement.cloneNode(true) as HTMLElement;\n\n  console.log(newEl);\n\n  // Query the internal elements of the Collection item\n  const url: HTMLLinkElement | null = newEl.querySelector('[data-element=\"link\"]');\n\n  const logo: HTMLImageElement | null = newEl.querySelector('[data-element=\"logo\"]');\n  const title = newEl.querySelector('[data-element=\"title\"]');\n  const company = newEl.querySelector('[data-element=\"company\"]');\n  const location = newEl.querySelector('[data-element=\"location\"]');\n  const experience = newEl.querySelector('[data-element=\"level\"]');\n  const jobType = newEl.querySelector('[data-element=\"type\"]');\n  const jobFunction = newEl.querySelector('[data-element=\"job-function\"]');\n\n  const locationsFormatted = Array.isArray(job.locations)\n    ? job.locations.join(', ')\n    : job.locations;\n\n  // Populate the internal items\n  if (url) url.href = job.url || '';\n  if (logo) logo.src = job.companyLogo || '';\n  if (title) title.textContent = job.title;\n  if (company) company.textContent = job.companyName;\n  if (location) location.textContent = locationsFormatted;\n  if (experience) experience.textContent = job.experience;\n  if (jobType) jobType.textContent = job.function;\n  if (jobFunction) jobFunction.textContent = job.function;\n\n  newEl.classList.remove('hide');\n  return newEl;\n}\n", "/**\n *\n * @returns jobs\n */\n\nexport async function fetchJobs() {\n  try {\n    const response = await fetch(\n      'https://feed.jobylon.com/feeds/a23d1a2b-647c-4497-b36b-1555efaba88f/?format=json'\n    );\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n", "/**\n * Sort an array of elements by date\n * @param {Array<any>} array Array to sort\n * @param {string} dateProp Date property to sort by\n * @param { string} order Order of the sort (asc or desc)\n */\n\nexport function sortArrayByDateProp(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  array: Array<any>,\n  dateProp: string,\n  order: string | 'asc' | 'desc' = 'desc'\n) {\n  array.sort((a, b) => {\n    const dateA = new Date(a[dateProp]);\n    const dateB = new Date(b[dateProp]);\n\n    if (order === 'asc') {\n      return dateA.getTime() - dateB.getTime();\n    }\n\n    if (order === 'desc') {\n      return dateB.getTime() - dateA.getTime();\n    }\n\n    throw new Error('Order must be asc or desc');\n  });\n}\n", "import type { CMSFilters } from '@finsweet/attributes-cmscore/types/CMSFilters';\n\nimport { queryElement } from '$utils/queryElement';\nimport { queryElements } from '$utils/queryElements';\nimport { createFilterEl, createJob, fetchJobs } from '$utils/startupJobs';\nimport { sortArrayByDateProp } from '$utils/startupJobs/sortArrayByDateProp';\nimport type { Job } from '$utils/startupJobs/types';\n\nwindow.fsAttributes = window.fsAttributes || [];\n\nwindow.fsAttributes.push([\n  'cmsfilter',\n  async (filterInstances: CMSFilters[]) => {\n    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\n    const [filterInstance] = filterInstances;\n    const { listInstance } = filterInstance;\n    const templateEl = queryElement('[startup-jobs-element=\"template\"]') as HTMLElement;\n    if (!filterInstance || !templateEl) return;\n\n    // 1) get Jobylon and existing Webflow CMS jobs\n    const jobylonData = await fetchJobs();\n\n    const webflowData: HTMLScriptElement[] = queryElements(\n      '[startup-jobs-element=\"source-list\"] script[type=\"application/json\"]'\n    );\n\n    const webflowJobs: Job[] = webflowData.map((script) => {\n      if (!script.textContent) return;\n      const data = JSON.parse(script.textContent);\n\n      return { ...data, locations: [data.locations] };\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const jobylonJobs = jobylonData.map((job: any) => {\n      return {\n        companyName: job.company.name,\n        companyLogo: job.company.logo,\n        experience: job.experience,\n        function: job.function,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        locations: job.locations.map((location: any) => {\n          if (!location) return;\n\n          return location.location.city;\n        }),\n        publishDate: job.from_date,\n        title: job.title,\n        url: job.urls.ad,\n      } as Job;\n    });\n\n    const jobs: Job[] = [...webflowJobs, ...jobylonJobs];\n\n    // 2) sort jobs by publish date\n    sortArrayByDateProp(jobs, 'publishDate', 'desc');\n\n    // 3) create elements from template element\n    const elements = jobs.map((job) => createJob(job, templateEl));\n\n    // 4) clear CMSFilter list and add new items/elements\n    listInstance.items = [];\n    listInstance.addItems(elements);\n\n    // 5) get needed filter elements\n    const checkboxTemplate = queryElement('[startup-jobs-element=\"checkbox-template\"]');\n    if (!checkboxTemplate) return;\n\n    const filterExperienceList = queryElement('[startup-jobs-element=\"filter-list-experience\"]');\n    const filterFunctionList = queryElement('[startup-jobs-element=\"filter-list-function\"]');\n    const filterLocationList = queryElement('[startup-jobs-element=\"filter-list-location\"]');\n\n    // 6) unique values for each filter category\n    const uniqueExperiences = new Set<string>();\n    const uniqueFunctions = new Set<string>();\n    const uniqueLocations = new Set<string>();\n\n    jobs.forEach((job) => {\n      if (job.experience) uniqueExperiences.add(job.experience);\n      if (job.function) uniqueFunctions.add(job.function);\n\n      job.locations.forEach(\n        (location: string | null) => location !== null && uniqueLocations.add(location)\n      );\n    });\n\n    // 7) create filter elements from template element\n    if (filterExperienceList)\n      uniqueExperiences.forEach((item) => {\n        const element = createFilterEl(item, checkboxTemplate, 'experience');\n        if (!element) return;\n\n        filterExperienceList.appendChild(element);\n      });\n\n    if (filterLocationList)\n      uniqueLocations.forEach((item) => {\n        const element = createFilterEl(item, checkboxTemplate, 'location');\n        if (!element) return;\n\n        filterLocationList.appendChild(element);\n      });\n\n    if (filterFunctionList)\n      uniqueFunctions.forEach((item) => {\n        const element = createFilterEl(item, checkboxTemplate, 'job-function');\n        if (!element) return;\n\n        filterFunctionList.appendChild(element);\n      });\n\n    // 8) initialize CMSFilter\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (filterInstance as any).init();\n  },\n]);\n"],
  "mappings": "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",
  "names": ["location", "location"]
}
